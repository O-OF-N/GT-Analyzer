/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gtd;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"org.gtd\",\"fields\":[{\"name\":\"region\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"lattitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence region;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence lattitude;
  @Deprecated public java.lang.CharSequence longitude;

  /**
   * Default constructor.
   */
  public Location() {}

  /**
   * All-args constructor.
   */
  public Location(java.lang.CharSequence region, java.lang.CharSequence country, java.lang.CharSequence state, java.lang.CharSequence city, java.lang.CharSequence lattitude, java.lang.CharSequence longitude) {
    this.region = region;
    this.country = country;
    this.state = state;
    this.city = city;
    this.lattitude = lattitude;
    this.longitude = longitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return region;
    case 1: return country;
    case 2: return state;
    case 3: return city;
    case 4: return lattitude;
    case 5: return longitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: region = (java.lang.CharSequence)value$; break;
    case 1: country = (java.lang.CharSequence)value$; break;
    case 2: state = (java.lang.CharSequence)value$; break;
    case 3: city = (java.lang.CharSequence)value$; break;
    case 4: lattitude = (java.lang.CharSequence)value$; break;
    case 5: longitude = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'region' field.
   */
  public java.lang.CharSequence getRegion() {
    return region;
  }

  /**
   * Sets the value of the 'region' field.
   * @param value the value to set.
   */
  public void setRegion(java.lang.CharSequence value) {
    this.region = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'lattitude' field.
   */
  public java.lang.CharSequence getLattitude() {
    return lattitude;
  }

  /**
   * Sets the value of the 'lattitude' field.
   * @param value the value to set.
   */
  public void setLattitude(java.lang.CharSequence value) {
    this.lattitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.CharSequence value) {
    this.longitude = value;
  }

  /** Creates a new Location RecordBuilder */
  public static org.gtd.Location.Builder newBuilder() {
    return new org.gtd.Location.Builder();
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Builder */
  public static org.gtd.Location.Builder newBuilder(org.gtd.Location.Builder other) {
    return new org.gtd.Location.Builder(other);
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Location instance */
  public static org.gtd.Location.Builder newBuilder(org.gtd.Location other) {
    return new org.gtd.Location.Builder(other);
  }
  
  /**
   * RecordBuilder for Location instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    private java.lang.CharSequence region;
    private java.lang.CharSequence country;
    private java.lang.CharSequence state;
    private java.lang.CharSequence city;
    private java.lang.CharSequence lattitude;
    private java.lang.CharSequence longitude;

    /** Creates a new Builder */
    private Builder() {
      super(org.gtd.Location.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gtd.Location.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Location instance */
    private Builder(org.gtd.Location other) {
            super(org.gtd.Location.SCHEMA$);
      if (isValidValue(fields()[0], other.region)) {
        this.region = data().deepCopy(fields()[0].schema(), other.region);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state)) {
        this.state = data().deepCopy(fields()[2].schema(), other.state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lattitude)) {
        this.lattitude = data().deepCopy(fields()[4].schema(), other.lattitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'region' field */
    public java.lang.CharSequence getRegion() {
      return region;
    }
    
    /** Sets the value of the 'region' field */
    public org.gtd.Location.Builder setRegion(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.region = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'region' field has been set */
    public boolean hasRegion() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'region' field */
    public org.gtd.Location.Builder clearRegion() {
      region = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.CharSequence getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public org.gtd.Location.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.country = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'country' field */
    public org.gtd.Location.Builder clearCountry() {
      country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'state' field */
    public java.lang.CharSequence getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public org.gtd.Location.Builder setState(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.state = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'state' field */
    public org.gtd.Location.Builder clearState() {
      state = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'city' field */
    public java.lang.CharSequence getCity() {
      return city;
    }
    
    /** Sets the value of the 'city' field */
    public org.gtd.Location.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.city = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'city' field has been set */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'city' field */
    public org.gtd.Location.Builder clearCity() {
      city = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'lattitude' field */
    public java.lang.CharSequence getLattitude() {
      return lattitude;
    }
    
    /** Sets the value of the 'lattitude' field */
    public org.gtd.Location.Builder setLattitude(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.lattitude = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'lattitude' field has been set */
    public boolean hasLattitude() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'lattitude' field */
    public org.gtd.Location.Builder clearLattitude() {
      lattitude = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'longitude' field */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }
    
    /** Sets the value of the 'longitude' field */
    public org.gtd.Location.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.longitude = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'longitude' field has been set */
    public boolean hasLongitude() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'longitude' field */
    public org.gtd.Location.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Location build() {
      try {
        Location record = new Location();
        record.region = fieldSetFlags()[0] ? this.region : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.country = fieldSetFlags()[1] ? this.country : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.state = fieldSetFlags()[2] ? this.state : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.city = fieldSetFlags()[3] ? this.city : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.lattitude = fieldSetFlags()[4] ? this.lattitude : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.longitude = fieldSetFlags()[5] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
