/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gtd;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AttacksPerCountry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttacksPerCountry\",\"namespace\":\"org.gtd\",\"fields\":[{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"int\"}]}");
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public int count;

  /**
   * Default constructor.
   */
  public AttacksPerCountry() {}

  /**
   * All-args constructor.
   */
  public AttacksPerCountry(java.lang.CharSequence country, java.lang.Integer count) {
    this.country = country;
    this.count = count;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return country;
    case 1: return count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: country = (java.lang.CharSequence)value$; break;
    case 1: count = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /** Creates a new AttacksPerCountry RecordBuilder */
  public static org.gtd.AttacksPerCountry.Builder newBuilder() {
    return new org.gtd.AttacksPerCountry.Builder();
  }
  
  /** Creates a new AttacksPerCountry RecordBuilder by copying an existing Builder */
  public static org.gtd.AttacksPerCountry.Builder newBuilder(org.gtd.AttacksPerCountry.Builder other) {
    return new org.gtd.AttacksPerCountry.Builder(other);
  }
  
  /** Creates a new AttacksPerCountry RecordBuilder by copying an existing AttacksPerCountry instance */
  public static org.gtd.AttacksPerCountry.Builder newBuilder(org.gtd.AttacksPerCountry other) {
    return new org.gtd.AttacksPerCountry.Builder(other);
  }
  
  /**
   * RecordBuilder for AttacksPerCountry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AttacksPerCountry>
    implements org.apache.avro.data.RecordBuilder<AttacksPerCountry> {

    private java.lang.CharSequence country;
    private int count;

    /** Creates a new Builder */
    private Builder() {
      super(org.gtd.AttacksPerCountry.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gtd.AttacksPerCountry.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing AttacksPerCountry instance */
    private Builder(org.gtd.AttacksPerCountry other) {
            super(org.gtd.AttacksPerCountry.SCHEMA$);
      if (isValidValue(fields()[0], other.country)) {
        this.country = data().deepCopy(fields()[0].schema(), other.country);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'country' field */
    public java.lang.CharSequence getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public org.gtd.AttacksPerCountry.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.country = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'country' field */
    public org.gtd.AttacksPerCountry.Builder clearCountry() {
      country = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'count' field */
    public java.lang.Integer getCount() {
      return count;
    }
    
    /** Sets the value of the 'count' field */
    public org.gtd.AttacksPerCountry.Builder setCount(int value) {
      validate(fields()[1], value);
      this.count = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'count' field has been set */
    public boolean hasCount() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'count' field */
    public org.gtd.AttacksPerCountry.Builder clearCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AttacksPerCountry build() {
      try {
        AttacksPerCountry record = new AttacksPerCountry();
        record.country = fieldSetFlags()[0] ? this.country : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.count = fieldSetFlags()[1] ? this.count : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
