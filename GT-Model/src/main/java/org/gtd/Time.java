/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gtd;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Time extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Time\",\"namespace\":\"org.gtd\",\"fields\":[{\"name\":\"year\",\"type\":\"string\"},{\"name\":\"month\",\"type\":\"string\"},{\"name\":\"dt\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence year;
  @Deprecated public java.lang.CharSequence month;
  @Deprecated public java.lang.CharSequence dt;

  /**
   * Default constructor.
   */
  public Time() {}

  /**
   * All-args constructor.
   */
  public Time(java.lang.CharSequence year, java.lang.CharSequence month, java.lang.CharSequence dt) {
    this.year = year;
    this.month = month;
    this.dt = dt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return month;
    case 2: return dt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.CharSequence)value$; break;
    case 1: month = (java.lang.CharSequence)value$; break;
    case 2: dt = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.CharSequence getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.CharSequence value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'month' field.
   */
  public java.lang.CharSequence getMonth() {
    return month;
  }

  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.CharSequence value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'dt' field.
   */
  public java.lang.CharSequence getDt() {
    return dt;
  }

  /**
   * Sets the value of the 'dt' field.
   * @param value the value to set.
   */
  public void setDt(java.lang.CharSequence value) {
    this.dt = value;
  }

  /** Creates a new Time RecordBuilder */
  public static org.gtd.Time.Builder newBuilder() {
    return new org.gtd.Time.Builder();
  }
  
  /** Creates a new Time RecordBuilder by copying an existing Builder */
  public static org.gtd.Time.Builder newBuilder(org.gtd.Time.Builder other) {
    return new org.gtd.Time.Builder(other);
  }
  
  /** Creates a new Time RecordBuilder by copying an existing Time instance */
  public static org.gtd.Time.Builder newBuilder(org.gtd.Time other) {
    return new org.gtd.Time.Builder(other);
  }
  
  /**
   * RecordBuilder for Time instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Time>
    implements org.apache.avro.data.RecordBuilder<Time> {

    private java.lang.CharSequence year;
    private java.lang.CharSequence month;
    private java.lang.CharSequence dt;

    /** Creates a new Builder */
    private Builder() {
      super(org.gtd.Time.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gtd.Time.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Time instance */
    private Builder(org.gtd.Time other) {
            super(org.gtd.Time.SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dt)) {
        this.dt = data().deepCopy(fields()[2].schema(), other.dt);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'year' field */
    public java.lang.CharSequence getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public org.gtd.Time.Builder setYear(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'year' field */
    public org.gtd.Time.Builder clearYear() {
      year = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'month' field */
    public java.lang.CharSequence getMonth() {
      return month;
    }
    
    /** Sets the value of the 'month' field */
    public org.gtd.Time.Builder setMonth(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.month = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'month' field has been set */
    public boolean hasMonth() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'month' field */
    public org.gtd.Time.Builder clearMonth() {
      month = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'dt' field */
    public java.lang.CharSequence getDt() {
      return dt;
    }
    
    /** Sets the value of the 'dt' field */
    public org.gtd.Time.Builder setDt(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dt = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'dt' field has been set */
    public boolean hasDt() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'dt' field */
    public org.gtd.Time.Builder clearDt() {
      dt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Time build() {
      try {
        Time record = new Time();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.month = fieldSetFlags()[1] ? this.month : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dt = fieldSetFlags()[2] ? this.dt : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
