/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gtd;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Key extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Key\",\"namespace\":\"org.gtd\",\"fields\":[{\"name\":\"year\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence year;
  @Deprecated public java.lang.CharSequence country;

  /**
   * Default constructor.
   */
  public Key() {}

  /**
   * All-args constructor.
   */
  public Key(java.lang.CharSequence year, java.lang.CharSequence country) {
    this.year = year;
    this.country = country;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return country;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.CharSequence)value$; break;
    case 1: country = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.CharSequence getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.CharSequence value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /** Creates a new Key RecordBuilder */
  public static org.gtd.Key.Builder newBuilder() {
    return new org.gtd.Key.Builder();
  }
  
  /** Creates a new Key RecordBuilder by copying an existing Builder */
  public static org.gtd.Key.Builder newBuilder(org.gtd.Key.Builder other) {
    return new org.gtd.Key.Builder(other);
  }
  
  /** Creates a new Key RecordBuilder by copying an existing Key instance */
  public static org.gtd.Key.Builder newBuilder(org.gtd.Key other) {
    return new org.gtd.Key.Builder(other);
  }
  
  /**
   * RecordBuilder for Key instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Key>
    implements org.apache.avro.data.RecordBuilder<Key> {

    private java.lang.CharSequence year;
    private java.lang.CharSequence country;

    /** Creates a new Builder */
    private Builder() {
      super(org.gtd.Key.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gtd.Key.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Key instance */
    private Builder(org.gtd.Key other) {
            super(org.gtd.Key.SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'year' field */
    public java.lang.CharSequence getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public org.gtd.Key.Builder setYear(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'year' field */
    public org.gtd.Key.Builder clearYear() {
      year = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.CharSequence getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public org.gtd.Key.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.country = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'country' field */
    public org.gtd.Key.Builder clearCountry() {
      country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Key build() {
      try {
        Key record = new Key();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.country = fieldSetFlags()[1] ? this.country : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
