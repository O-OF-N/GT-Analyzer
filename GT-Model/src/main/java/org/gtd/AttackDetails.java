/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gtd;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AttackDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttackDetails\",\"namespace\":\"org.gtd\",\"fields\":[{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"region\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"lattitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"}]}},{\"name\":\"time\",\"type\":{\"type\":\"record\",\"name\":\"Time\",\"fields\":[{\"name\":\"year\",\"type\":\"string\"},{\"name\":\"month\",\"type\":\"string\"},{\"name\":\"dt\",\"type\":\"string\"}]}},{\"name\":\"attack\",\"type\":{\"type\":\"record\",\"name\":\"Attack\",\"fields\":[{\"name\":\"suicide\",\"type\":\"boolean\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"motive\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"weapon\",\"type\":[\"null\",\"string\"],\"default\":null}]}},{\"name\":\"target\",\"type\":{\"type\":\"record\",\"name\":\"Target\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"subType\",\"type\":\"string\"},{\"name\":\"corp\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"target1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nationality1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"target2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nationality2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"target3\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nationality3\",\"type\":[\"null\",\"string\"],\"default\":null}]}}]}");
  @Deprecated public org.gtd.Location location;
  @Deprecated public org.gtd.Time time;
  @Deprecated public org.gtd.Attack attack;
  @Deprecated public org.gtd.Target target;

  /**
   * Default constructor.
   */
  public AttackDetails() {}

  /**
   * All-args constructor.
   */
  public AttackDetails(org.gtd.Location location, org.gtd.Time time, org.gtd.Attack attack, org.gtd.Target target) {
    this.location = location;
    this.time = time;
    this.attack = attack;
    this.target = target;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return location;
    case 1: return time;
    case 2: return attack;
    case 3: return target;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: location = (org.gtd.Location)value$; break;
    case 1: time = (org.gtd.Time)value$; break;
    case 2: attack = (org.gtd.Attack)value$; break;
    case 3: target = (org.gtd.Target)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'location' field.
   */
  public org.gtd.Location getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(org.gtd.Location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'time' field.
   */
  public org.gtd.Time getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(org.gtd.Time value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'attack' field.
   */
  public org.gtd.Attack getAttack() {
    return attack;
  }

  /**
   * Sets the value of the 'attack' field.
   * @param value the value to set.
   */
  public void setAttack(org.gtd.Attack value) {
    this.attack = value;
  }

  /**
   * Gets the value of the 'target' field.
   */
  public org.gtd.Target getTarget() {
    return target;
  }

  /**
   * Sets the value of the 'target' field.
   * @param value the value to set.
   */
  public void setTarget(org.gtd.Target value) {
    this.target = value;
  }

  /** Creates a new AttackDetails RecordBuilder */
  public static org.gtd.AttackDetails.Builder newBuilder() {
    return new org.gtd.AttackDetails.Builder();
  }
  
  /** Creates a new AttackDetails RecordBuilder by copying an existing Builder */
  public static org.gtd.AttackDetails.Builder newBuilder(org.gtd.AttackDetails.Builder other) {
    return new org.gtd.AttackDetails.Builder(other);
  }
  
  /** Creates a new AttackDetails RecordBuilder by copying an existing AttackDetails instance */
  public static org.gtd.AttackDetails.Builder newBuilder(org.gtd.AttackDetails other) {
    return new org.gtd.AttackDetails.Builder(other);
  }
  
  /**
   * RecordBuilder for AttackDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AttackDetails>
    implements org.apache.avro.data.RecordBuilder<AttackDetails> {

    private org.gtd.Location location;
    private org.gtd.Time time;
    private org.gtd.Attack attack;
    private org.gtd.Target target;

    /** Creates a new Builder */
    private Builder() {
      super(org.gtd.AttackDetails.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gtd.AttackDetails.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing AttackDetails instance */
    private Builder(org.gtd.AttackDetails other) {
            super(org.gtd.AttackDetails.SCHEMA$);
      if (isValidValue(fields()[0], other.location)) {
        this.location = data().deepCopy(fields()[0].schema(), other.location);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attack)) {
        this.attack = data().deepCopy(fields()[2].schema(), other.attack);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.target)) {
        this.target = data().deepCopy(fields()[3].schema(), other.target);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'location' field */
    public org.gtd.Location getLocation() {
      return location;
    }
    
    /** Sets the value of the 'location' field */
    public org.gtd.AttackDetails.Builder setLocation(org.gtd.Location value) {
      validate(fields()[0], value);
      this.location = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'location' field has been set */
    public boolean hasLocation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'location' field */
    public org.gtd.AttackDetails.Builder clearLocation() {
      location = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'time' field */
    public org.gtd.Time getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public org.gtd.AttackDetails.Builder setTime(org.gtd.Time value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'time' field */
    public org.gtd.AttackDetails.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'attack' field */
    public org.gtd.Attack getAttack() {
      return attack;
    }
    
    /** Sets the value of the 'attack' field */
    public org.gtd.AttackDetails.Builder setAttack(org.gtd.Attack value) {
      validate(fields()[2], value);
      this.attack = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'attack' field has been set */
    public boolean hasAttack() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'attack' field */
    public org.gtd.AttackDetails.Builder clearAttack() {
      attack = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'target' field */
    public org.gtd.Target getTarget() {
      return target;
    }
    
    /** Sets the value of the 'target' field */
    public org.gtd.AttackDetails.Builder setTarget(org.gtd.Target value) {
      validate(fields()[3], value);
      this.target = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'target' field has been set */
    public boolean hasTarget() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'target' field */
    public org.gtd.AttackDetails.Builder clearTarget() {
      target = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AttackDetails build() {
      try {
        AttackDetails record = new AttackDetails();
        record.location = fieldSetFlags()[0] ? this.location : (org.gtd.Location) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (org.gtd.Time) defaultValue(fields()[1]);
        record.attack = fieldSetFlags()[2] ? this.attack : (org.gtd.Attack) defaultValue(fields()[2]);
        record.target = fieldSetFlags()[3] ? this.target : (org.gtd.Target) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
